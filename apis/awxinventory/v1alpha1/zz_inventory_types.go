// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InventoryInitParameters struct {

	// Optional description of this inventory.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Filter that will be applied to the hosts of this inventory.
	HostFilter *string `json:"hostFilter,omitempty" tf:"host_filter,omitempty"`

	// Kind of inventory being represented.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Name of this inventory.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Organization containing this inventory.
	Organization *float64 `json:"organization,omitempty" tf:"organization,omitempty"`

	// If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied.
	PreventInstanceGroupFallback *bool `json:"preventInstanceGroupFallback,omitempty" tf:"prevent_instance_group_fallback,omitempty"`

	// Inventory variables in JSON format
	Variables *string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type InventoryObservation struct {

	// Optional description of this inventory.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Flag indicating whether any hosts in this inventory have failed.
	HasActiveFailures *bool `json:"hasActiveFailures,omitempty" tf:"has_active_failures,omitempty"`

	// Flag indicating whether this inventory has any external inventory sources.
	HasInventorySources *bool `json:"hasInventorySources,omitempty" tf:"has_inventory_sources,omitempty"`

	// Filter that will be applied to the hosts of this inventory.
	HostFilter *string `json:"hostFilter,omitempty" tf:"host_filter,omitempty"`

	// Number of hosts in this inventory with active failures.
	HostsWithActiveFailures *float64 `json:"hostsWithActiveFailures,omitempty" tf:"hosts_with_active_failures,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of external inventory sources in this inventory with failures.
	InventorySourcesWithFailures *float64 `json:"inventorySourcesWithFailures,omitempty" tf:"inventory_sources_with_failures,omitempty"`

	// Kind of inventory being represented.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Name of this inventory.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Organization containing this inventory.
	Organization *float64 `json:"organization,omitempty" tf:"organization,omitempty"`

	// Flag indicating the inventory is being deleted.
	PendingDeletion *bool `json:"pendingDeletion,omitempty" tf:"pending_deletion,omitempty"`

	// If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied.
	PreventInstanceGroupFallback *bool `json:"preventInstanceGroupFallback,omitempty" tf:"prevent_instance_group_fallback,omitempty"`

	// Total number of groups in this inventory.
	TotalGroups *float64 `json:"totalGroups,omitempty" tf:"total_groups,omitempty"`

	// Total number of hosts in this inventory.
	TotalHosts *float64 `json:"totalHosts,omitempty" tf:"total_hosts,omitempty"`

	// Total number of external inventory sources configured within this inventory.
	TotalInventorySources *float64 `json:"totalInventorySources,omitempty" tf:"total_inventory_sources,omitempty"`

	// Inventory variables in JSON format
	Variables *string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type InventoryParameters struct {

	// Optional description of this inventory.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Filter that will be applied to the hosts of this inventory.
	// +kubebuilder:validation:Optional
	HostFilter *string `json:"hostFilter,omitempty" tf:"host_filter,omitempty"`

	// Kind of inventory being represented.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Name of this inventory.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Organization containing this inventory.
	// +kubebuilder:validation:Optional
	Organization *float64 `json:"organization,omitempty" tf:"organization,omitempty"`

	// If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied.
	// +kubebuilder:validation:Optional
	PreventInstanceGroupFallback *bool `json:"preventInstanceGroupFallback,omitempty" tf:"prevent_instance_group_fallback,omitempty"`

	// Inventory variables in JSON format
	// +kubebuilder:validation:Optional
	Variables *string `json:"variables,omitempty" tf:"variables,omitempty"`
}

// InventorySpec defines the desired state of Inventory
type InventorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InventoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InventoryInitParameters `json:"initProvider,omitempty"`
}

// InventoryStatus defines the observed state of Inventory.
type InventoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InventoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Inventory is the Schema for the Inventorys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awx-ilijamt}
type Inventory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	Spec   InventorySpec   `json:"spec"`
	Status InventoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InventoryList contains a list of Inventorys
type InventoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Inventory `json:"items"`
}

// Repository type metadata.
var (
	Inventory_Kind             = "Inventory"
	Inventory_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Inventory_Kind}.String()
	Inventory_KindAPIVersion   = Inventory_Kind + "." + CRDGroupVersion.String()
	Inventory_GroupVersionKind = CRDGroupVersion.WithKind(Inventory_Kind)
)

func init() {
	SchemeBuilder.Register(&Inventory{}, &InventoryList{})
}
